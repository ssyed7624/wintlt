<?php

namespace App\Http\Controllers\Auth;

use App\Models\AccountDetails\AccountDetails;
use App\Models\UserACL\UserExtendedAccess;
use App\Libraries\ERunActions\ERunActions;
use App\Models\UserDetails\UserDetails;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Hash;
use App\Models\UserRoles\UserRoles;
use Illuminate\Http\Request;
use App\Libraries\Common;
use GuzzleHttp\Client;
use Validator;
use Log;
use DB;

class UserRegisterController extends Controller
{
	public function __construct()
	{

	}

	public function userRegister(Request $request)
	{
        $data = $request->all()['agent_register'];
        $rules=[
            'account_id'              =>'required',
            'first_name'              =>'required',
            'email_id'                =>'required | email | unique:'.config("tables.user_details").',email_id,D,status,account_id,'.$data['account_id'],
            'last_name'               =>'required',
            'phone_no'                =>'required | unique:'.config("tables.user_details").',phone_no,D,status,account_id,'.$data['account_id'],
            'mobile_code_country'     =>'required',
            'mobile_code'             =>'required',
            'password'                =>'required',
            'password_confirmation'   =>'required',
            'role_id'                 =>'required',
        ];

        $message=[
            'account_id.required'              =>__('agent.account_id_required'),
            'first_name.required'              =>__('common.first_name_required'),
            'email_id.required'                =>__('common.email_field_required'),
            'email_id.email'                   =>__('common.valid_email'),
            'last_name.required'               =>__('common.last_name_required'),
            'phone_no.required'                =>__('agent.phone_no_required'),
            'phone_no.unique'                  =>__('common.phone_no_already_exist'),
            'mobile_code_country.required'     =>__('agent.mobile_code_country_required'),
            'mobile_code.required'             =>__('agent.mobile_code_required'),
            'password.required'                =>__('common.password_field_required'),
            'password_confirmation.required'   =>__('common.confirm_password_field_required'),
            'email_id.unique'                  =>__('common.email_already_exist'), 
            'role_id.required'                 =>__('agent.role_id_required'), 
        ];
        
        $validator = Validator::make($data, $rules, $message);

        if ($validator->fails()) {
            $responseData['status_code']         = config('common.common_status_code.validation_error');
            $responseData['status']              = 'failed';
            $responseData['message']             = 'The given data was invalid';
            $responseData['errors']              = $validator->errors();
            return response()->json($responseData, $responseData['status_code']);
        }

        $returnResponse = [];
        $returnResponse['status'] = 'success';
        $returnResponse['status_code'] = config('common.common_status_code.success');
        $returnResponse['message'] = "Agent Data Registered successfully";
        $returnResponse['short_text'] = "agent_register_success_msg";
        $requestHeader = $request->headers->all();
        $agencyB2BAccessUrl = isset($requestHeader['portal-origin'][0])?$requestHeader['portal-origin'][0]:'';
        $agencyB2BAccessUrl = str_replace('http://', '', $agencyB2BAccessUrl);
        $agencyB2BAccessUrl = str_replace('https://', '', $agencyB2BAccessUrl);
        $parentAccountId = 0;
        if($agencyB2BAccessUrl != ''){
            $parentAccount = AccountDetails::where('agency_b2b_access_url', $agencyB2BAccessUrl)->where('parent_account_id', 0)->where('account_id','!=',1)->first();
            if($parentAccount){
                $parentAccountId = $parentAccount->account_id;
            }            
        }
        
        DB::beginTransaction();
        try {

                $inputData = $data;
                $accountDetails = AccountDetails::find($data['account_id']);
                $autoGeneratedPwd  = Common::randomPassword();
                $data['password'] = isset($data['password']) ? $data['password'] : $autoGeneratedPwd;
                $passwordSend = 0;
                if($data['password'] == $autoGeneratedPwd)
                {
                    $passwordSend = 1;
                }
                $data['role_id'] = isset($data['role_id']) ? $data['role_id'] : UserRoles::getRoleIdBasedCode('AO');        
                $input = [
                    'user_name' => $data['first_name'],
                    'email_id' => strtolower($data['email_id']),
                    'alternate_email_id' => strtolower($data['email_id']),
                    'account_id' => $data['account_id'],
                    'role_id' => $data['role_id'],
                    'title' => $accountDetails->mailing_title,
                    'first_name' => $data['first_name'],
                    'last_name' => $data['last_name'],
                    'mobile_code' => $data['mobile_code'],
                    'mobile_code_country' => $data['mobile_code_country'],
                    'mobile_no' => $data['hidden_agent_phone_no'],
                    'alternate_contact_no' => Common::getFormatPhoneNumber($accountDetails->agency_mobile),
                    'zipcode' => $accountDetails->agency_pincode,
                    'phone_no' => Common::getFormatPhoneNumber($data['phone_no']),
                    'country' => $accountDetails->agency_country,
                    'state' => $accountDetails->agency_state,
                    'city' => $accountDetails->agency_city,
                    'address_line_1' => $accountDetails->agency_address1,
                    'address_line_2' => $accountDetails->agency_address1,
                    'timezone' => $accountDetails->operating_time_zone,
                    'other_info' => '',
                    'status' => 'PA',
                    'created_by' => 1,
                    'updated_by' => 1,
                    'created_at'   => Common::getDate(),
                    'updated_at'   => Common::getDate(),
                    'password' => Hash::make($data['password']),
                ];

                $userID = UserDetails::create($input)->user_id;                    

                if($userID){
                    $extendedAccess = new UserExtendedAccess;
                    $extended = [];
                    $extended['user_id'] = $userID; 
                    $extended['account_id'] = $data['account_id']; 
                    $extended['reference_id']  = 0;
                    $extended['access_type'] = 0;
                    $extended['account_type_id'] = config('common.agency_account_type_id');
                    $extended['role_id'] =  $data['role_id'];
                    $extended['is_primary'] =  1;
                    $extendedAccess->create($extended);
                }        

                AccountDetails::where('account_id',$data['account_id'])->where('primary_user_id',0)->update(['primary_user_id' => $userID]);

                $user = UserDetails::find($userID);
                DB::commit();

                //prepare original Agency data
                // $newGetOriginal = AccountDetails::find($data['account_id'])->getOriginal();
                // Common::prepareArrayForLog($data['account_id'],'Agency Created',(object)$newGetOriginal,config('tables.account_details'),'agency_user_management');

                // //to process log entry for Agent Data
                // $newGetOriginal = UserDetails::find($userID)->getOriginal();
                // $userExtendedAccessLog = [];
                // $userExtendedAccessLog = UserExtendedAccess::select('account_id','role_id','is_primary')->where('user_id',$userID)->get();
                // if(!empty($userExtendedAccessLog) && count($userExtendedAccessLog) > 0)
                // {
                //     $userExtendedAccessLog = $userExtendedAccessLog->toArray();
                // }
                // $newGetOriginal['user_extended_access'] = json_encode($userExtendedAccessLog);
                // Common::prepareArrayForLog($userID,'Agent Created',(object)$newGetOriginal,config('tables.user_details'),'agent_user_management');
                //to process New agency Registration
                $accountRelatedDetails = AccountDetails::getAccountAndParentAccountDetails($data['account_id']);
                $parentAccountName = AccountDetails::getAccountName($parentAccountId);
                $parentAccountPhone = AccountDetails::select('agency_mobile_code','agency_phone')->where('account_id',$parentAccountId)->first();
                if($parentAccountPhone['agency_phone'] && !empty($parentAccountPhone['agency_phone']))
                    $parentAccountPhone = Common::getFormatPhoneNumberView($parentAccountPhone['agency_mobile_code'],$parentAccountPhone['agency_phone']);
                else
                    $parentAccountPhone = '';
                $accountId = $data['account_id'];

                if($passwordSend)
                {                    
                    $prepareAgentSendMailArray['send_or_auto_generate'] = 'auto_generate_password';
                    $prepareAgentSendMailArray['password'] = $data['password'];
                    $prepareAgentSendMailArray['mobile_code_country'] = $data['mobile_code_country'];          
                    UserDetails::sendEmailForAgent($userID,(object)$prepareAgentSendMailArray);
                }
                // to process agent creation
                $url = url('/').'/api/sendEmail';
                $postArray = array('mailType' => 'agentRegisteredMailTrigger', 'toMail'=>$user->email_id, 'customer_name'=>$user->user_name, 'password'=>$data['password'], 'parent_account_name'=> $parentAccountName, 'parent_account_phone_no'=> $parentAccountPhone, 'account_id' => $accountId);
                ERunActions::touchUrl($url, $postData = $postArray, $contentType = "application/json");
            }
            catch (\Exception $e) {
                DB::rollback();
                $data = $e->getMessage();
                $returnResponse['status'] = 'failed';
                $returnResponse['status_code'] = config('common.common_status_code.failed');
                $returnResponse['message'] = $data;
                $returnResponse['short_text'] = 'server_error'; 
                $returnResponse['errors']['error'][] = $data;
            }

        return response()->json($returnResponse);
	}

    public function getAgentRegisterFormData()
    {
        $returnResponse['status'] = 'success';
        $returnResponse['status_code'] = config('common.common_status_code.success');
        $returnResponse['message'] = 'register related data found';
        $returnResponse['short_text'] = 'register_related_data';

        $returnData = [];
        $userRoleList = UserRoles::where('is_sign_up',1)->where('status','A')->pluck('role_name','role_id')->toArray();
        $returnData['userRoles'] = $userRoleList;
        $returnResponse['data'] = $returnData;
        
        return response()->json($returnResponse);
    }

}