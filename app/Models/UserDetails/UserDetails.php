<?php

namespace App\Models\UserDetails;

use Illuminate\Auth\Authenticatable;
use App\Models\UserRoles\UserRoles;
use Illuminate\Contracts\Auth\Access\Authorizable as AuthorizableContract;
use Illuminate\Contracts\Auth\Authenticatable as AuthenticatableContract;
use App\Models\AccountDetails\AccountDetails;
use App\Models\AccountDetails\AgencyPermissions;
use App\Libraries\ERunActions\ERunActions;
use Illuminate\Support\Facades\Hash;
use App\Models\Model;
use Laravel\Lumen\Auth\Authorizable;
use Laravel\Passport\HasApiTokens;
use App\Libraries\Common;
use App\Http\Middleware\UserACL;
use App\Models\UserACL\UserExtendedAccess;
use Auth;
use DB;

class UserDetails extends Model implements AuthenticatableContract, AuthorizableContract
{
    use HasApiTokens,Authenticatable, Authorizable;

    public function getTable()
    {
        return $this->table = config('tables.user_details');
    }
    protected $primaryKey = 'user_id'; //Changed default primary key into our user_details table user_id.
    public $email = '';


    protected $fillable = [
    'user_name', 'email_id', 'ems_user_id', 'alternate_email_id', 'alternate_contact_no', 'zipcode', 'other_info', 'password','remember_token','role_id','account_id','title','first_name','last_name','mobile_code','mobile_no','phone_no','country','state','city','address_line_1','address_line_2','timezone','fare_info_display','update_ticket_no','status','created_by','updated_by','mobile_code_country','api_token','allowed_users_to_view_card_number','show_supplier_wise_fare','allow_void_ticket','allow_split_pnr'
    ];

    /**
     * The attributes excluded from the model's JSON form.
     *
     * @var array
     */
    protected $hidden = [
        'password',
    ];

    public function findForPassport($identifier) {

        $agencyB2BAccessUrl = isset($_SERVER['HTTP_PORTAL_ORIGIN'])?$_SERVER['HTTP_PORTAL_ORIGIN']:'';

        $agencyB2BAccessUrl = str_replace('www.','',$agencyB2BAccessUrl);
        $agencyB2BAccessUrl = str_replace('https://','',$agencyB2BAccessUrl);
        $agencyB2BAccessUrl = str_replace('http://','',$agencyB2BAccessUrl); 

        $agencyB2BAccessUrl = explode('/', $agencyB2BAccessUrl); 

        $checkUrl =  '';

        if(isset($agencyB2BAccessUrl[0])){
            $checkUrl = $agencyB2BAccessUrl[0];
        }     

        return $this->select('user_details.*')->where('email_id', $identifier)->join('account_details', 'account_details.account_id', '=', 'user_details.account_id')->where('account_details.agency_b2b_access_url', $checkUrl)->where('account_details.status', 'A')->where('user_details.status', 'A')->first();
    }

    // public function findAndValidateForPassport($username, $password)
    // {
    //     $user = $this->where('email_id', $username)->first();

    //     if (! $user) {
    //         return;
    //     }

    //     return Hash::check($password, $user->password);
    // }


    public static function sendEmailForAgent($agentId,$request){
        $findAgent = UserDetails::find($agentId);
        //send email process
        $emailArray = array();
        $url = url('/').'/api/sendEmail';
        $accountRelatedDetails = AccountDetails::getAccountAndParentAccountDetails($findAgent->account_id);
        if(isset($request['send_or_auto_generate']) && $request['send_or_auto_generate'] == 'send_as_email'){
            //process mail
            //generate password randomly and send
            $autoGeneratedPwd = Common::randomPassword();
            $findAgent->password = Hash::make($autoGeneratedPwd);
            $findAgent->save();
            $postArray = array('mailType' => 'sendPasswordMailTrigger', 'toMail'=>$findAgent->email_id,'customer_name'=>$findAgent->user_name, 'password'=>$autoGeneratedPwd, 'parent_account_name'=> isset($accountRelatedDetails['agency_name']) ? $accountRelatedDetails['agency_name'] : '', 'parent_account_phone_no'=> $accountRelatedDetails['agency_phone'], 'account_id' => $findAgent->account_id);
            ERunActions::touchUrl($url, $postData = $postArray, $contentType = "application/json");

        }

        if(isset($request['send_or_auto_generate']) && $request['send_or_auto_generate'] == 'auto_generate_password'){
            $postArray = array('mailType' => 'sendPasswordMailTrigger', 'toMail'=>$findAgent->email_id,'customer_name'=>$findAgent->user_name, 'password'=>$request['password'], 'parent_account_name'=> isset($accountRelatedDetails['agency_name']) ? $accountRelatedDetails['agency_name'] : '', 'parent_account_phone_no'=> $accountRelatedDetails['agency_phone'], 'account_id' => $findAgent->account_id);
            ERunActions::touchUrl($url, $postData = $postArray, $contentType = "application/json");
        }

        //send agent added mail
        $postArray = array('mailType' => 'agentCreationMailTrigger', 'toMail'=>$findAgent->email_id, 'customer_name'=>$findAgent->user_name, 'parent_account_name'=> isset($accountRelatedDetails['agency_name']) ? $accountRelatedDetails['agency_name'] : '', 'parent_account_phone_no'=> $accountRelatedDetails['agency_phone'], 'account_id' => $findAgent->account_id);
        ERunActions::touchUrl($url, $postData = $postArray, $contentType = "application/json");

        

    }//eof

    public function account(){

        return $this->belongsTo('App\Models\AccountDetails\AccountDetails','account_id');
    }

    public function role(){

        return $this->belongsTo('App\Models\UserRoles\UserRoles','role_id');
    }
    
    public function user(){
    
        return $this->belongsTo('App\Models\UserDetails\UserDetails','created_by');
    }

    public function userExtendedAccess(){
    
        return $this->belongsTo('App\Models\UserACL\UserExtendedAccess','user_id');
    }

    //to check agent can create or not
    public static function allowAgentCreationCheck($accountId, $actionFlag, $userId=0){
        $returnData = [];
        $statusFlag = true;
        $agencyPermission = AgencyPermissions::select('allow_agents','no_of_agents')->where('account_id','=',$accountId)->first();
        $noOfAgentsAllowed = 0;
        if($agencyPermission){
            if($agencyPermission->allow_agents == 1){
                $noOfAgentsAllowed = $agencyPermission->no_of_agents;
            }
        }
        $noOfAgentsCreated = DB::table(config('tables.user_details'). ' AS ud')
                            ->join(config('tables.user_extended_access').' AS uea','ud.user_id','=','uea.user_id')
                            ->where('uea.account_id',$accountId)->whereNotIn('ud.user_id',[$userId])->whereIn('ud.status',['A','IA'])->count();
        
        // -$noOfAgentsCreated is to remove count of user created on Registering
        $noOfAgentsCreated = $noOfAgentsCreated-1;
        
        if( $noOfAgentsAllowed <= $noOfAgentsCreated )
            $statusFlag = false;

        if( $actionFlag == 'edit' && $noOfAgentsCreated == 0 )
            $statusFlag = true;

        $returnData['statusFlag'] = $statusFlag;
        $returnData['noOfAgentsAllowed'] = $noOfAgentsAllowed;
        $returnData['noOfAgentsCreated'] = $noOfAgentsCreated; 

        return $returnData;    
    }//eof

    public function getExtendedAccessAttribute()
    {
        if(isset(Auth::user()->user_id)){
            return UserExtendedAccess::getUserExtendedAccess(Auth::user()->user_id);
        }
        return [];
    }

    public function getIsSupplierAttribute()
    {   

        if(in_array(Auth::user()->role_id, config('common.super_admin_roles'))){
            return 1;
        }
        
        $getAccountDetails = AccountDetails::find(Auth::user()->account_id);
        $isSupplier = 0;
        if($getAccountDetails){
            $isSupplier = $getAccountDetails->is_supplier;
        }    
        return $isSupplier;
    }

    public static function getUserName($userId = 0,$fullNameFlag = '')
    {
        $returnName = '';
        $userData = UserDetails::find($userId);

        if($userData){
            if($fullNameFlag == 'yes'){
                $returnName = $userData->first_name .' '. $userData->last_name;
            }else{
                $returnName = $userData->first_name;
            }//eo else
        }else{
            $returnName = 'Not Set';
        }

        return $returnName;
    }//eof

    public static function getAgentList(){
        $accountIds = AccountDetails::getAccountDetails(0,0,true);
        $userDetails = UserDetails::select('user_id','account_id',DB::raw('concat(first_name," ",last_name) as agent_name'))
                        ->whereNotIn('role_id',[1])->where('status', 'A');
        if(!UserAcl::isSuperAdmin()){
            $userDetails->whereIn('account_id', $accountIds);
        }
        $userDetails = $userDetails->orderBy('first_name')->get();
        return $userDetails;
    }//eof
    
    public static function getUserList(){
        $accountIds = AccountDetails::getAccountDetails(0,0,true);
        $userDetails = UserDetails::select('user_id','account_id',DB::raw('concat(first_name," ",last_name) as user_name'))
                        ->where('status', 'A');
        if(!UserAcl::isSuperAdmin()){
            $userDetails->whereIn('account_id', $accountIds);
        }
        $userDetails = $userDetails->orderBy('first_name')->get();
        return $userDetails;
    }//eof

    public static function saveAgentData($request,$accountId=null){
    $agentModel = new UserDetails();
    if($accountId == null)
        $agentModel->account_id = Auth::user()->account_id;
    else
        $agentModel->account_id = $accountId;
    $accountDetails = AccountDetails::where('account_id', $agentModel->account_id)->first();

    $getUserRole = UserRoles::select('role_id')->where('role_code','AO')->first();
    $agentModel->role_id = $getUserRole->role_id;
    $agentModel->title = 'Mr';
    $agentModel->gender = 'male';
    $agentModel->first_name = (isset($request['first_name'])) ? $request['first_name'] : '';
    $agentModel->last_name = (isset($request['last_name'])) ? $request['last_name'] : '';
    $agentModel->mobile_no = (isset($request['mobile_no'])) ? Common::getFormatPhoneNumber($request['mobile_no']) : '';
    $agentModel->mobile_code = (isset($request['mobile_code'])) ? $request['mobile_code'] : '';
    $agentModel->mobile_code_country = (isset($request['mobile_code_country'])) ? $request['mobile_code_country'] : '';
    $agentModel->timezone = (isset($accountDetails->operating_time_zone)) ? $accountDetails->operating_time_zone : '';    
    $agentModel->email_id = (isset($request['agent_email'])) ? strtolower($request['agent_email']) : '';
    $agentModel->user_name = $agentModel->first_name;
    $agentModel->alternate_email_id = strtolower($agentModel->email_id);
    $generatePwd = '';

    if(isset($request['send_or_auto_generate']) && $request['send_or_auto_generate'] == 'send_as_email'){
        //process mail
        //generate password randomly and send
        $generatePwd = Hash::make(Common::randomPassword());
    }else{
        $generatePwd = Hash::make($request['password']);
    }

    $agentModel->password = $generatePwd;
    $agentModel->change_password_on_first_login = (isset($request['change_password_on_first_login']) && $request['change_password_on_first_login'] == '1') ? '1' : '0';
    $agentModel->email_verification = (config('common.agent_activation_email') == true) ? '1' : '0';
    $agentModel->status = ((isset($request['status'])) && ($request['status'] == '1' || $request['status'] == 'A')) ? 'A' : 'IA';

    $agentModel->created_by = Common::getUserID();
    $agentModel->updated_by = Common::getUserID();
    $agentModel->created_at = Common::getDate();
    $agentModel->updated_at = Common::getDate();
    $option = '';
    $returnArray = array();
    if($agentModel->save()){
        //User Extend Access Saving
        $extendedAccess = new UserExtendedAccess;
        $extended = [];
        $extended['user_id'] = $agentModel['user_id'];
        if($accountId == null)
        {
            $extended['account_id'] = Auth::user()->account_id;
        }
        else
        {
            $extended['account_id'] = $accountId;
        }
        $extended['reference_id']  = 0;
        $extended['access_type'] = 0;
        $extended['account_type_id'] = config('common.agency_account_type_id');;
        $extended['role_id'] =  $getUserRole->role_id;
        $extended['is_primary'] =  '0';
        $extendedAccess->create($extended);
        $option = [];
        //build option to send
        $optionQuery = UserDetails::
        select('user_id','account_id','email_id',DB::raw('concat(first_name," ",last_name) as agent_name'))
        ->where('user_id','=',$agentModel->user_id)->first();
        $option['id'] = $optionQuery->user_id;
        $option['name'] = $optionQuery->agent_name;
        $returnArray['data'] = $option;
        $returnArray['status'] = 'success';
        if(isset($request['action_flag']) && $request['action_flag'] == 'create'){
            $returnArray['temp_user_id'] = $request['tempUser'];
            $returnArray[$request['tempUser']] = $optionQuery->user_id;
        }
        $returnArray['user_id'] = $optionQuery->user_id;
        //to process log entry for Agent Data
        $newGetOriginal = UserDetails::find($optionQuery->user_id)->getOriginal();
        $userExtendedAccessLog = [];
        $userExtendedAccessLog = UserExtendedAccess::select('account_id','role_id','is_primary')->where('user_id',$optionQuery->user_id)->get();
        if(!empty($userExtendedAccessLog) && count($userExtendedAccessLog) > 0)
        {
            $userExtendedAccessLog = $userExtendedAccessLog->toArray();
        }
        $newGetOriginal['user_extended_access'] = json_encode($userExtendedAccessLog);
        Common::prepareArrayForLog($optionQuery->user_id,'Agent Created',(object)$newGetOriginal,config('tables.user_details'),'agent_user_management');
    }
    return $returnArray;
}//eof

}
